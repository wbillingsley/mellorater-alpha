package fivedomains.model

import upickle.default.{given, *}
import java.util.UUID

enum Species(val longText:String):
    case AmphibianUnspecified extends Species("Amphibian (unspecified)")
    case Arthropod extends Species("Arthropod (unspecified)")
    case Budgerigar extends Species("Bird - Budgerigar")
    case Chicken extends Species("Bird - Chicken")
    case Cockatiel extends Species("Bird - Cockatiel")
    case Cockatoo extends Species("Bird - Cockatoo")
    case BirdOther extends Species("Bird - other")
    case Parrot extends Species("Bird - Parrot (Psittacine)")
    case AfricanGrayParrot extends Species("Bird - Parrot (Psittacine) - African Grey Parrot")
    case AmazonParrot extends Species("Bird - Parrot (Psittacine) - Amazon Parrot")
    case Macaw extends Species("Bird - Parrot (Psittacine) - Macaw")
    case ParrotOther extends Species("Bird - Parrot (Psittacine) - other")
    case Parakeet extends Species("Bird - Parrot (Psittacine) - Parakeet")
    case Turkey extends Species("Bird - Turkey")
    case Duck extends Species("Bird - Waterfowl - Duck")
    case Goose extends Species("Bird - Waterfowl - Goose")
    case WaterfowlOther extends Species("Bird - Waterfowl - other")
    case Swan extends Species("Bird - Waterfowl - Swan")
    case Alpaca extends Species("Camelid - Alpaca")
    case Guanaco extends Species("Camelid - Guanaco")
    case Llama extends Species("Camelid - Llama")
    case CamelidOther extends Species("Camelid - other")
    case Cat extends Species("Cat (Feline - Domestic)")
    case Marmoset extends Species("Common marmoset")
    case Cow extends Species("Cow (Bovine)")
    case Deer extends Species("Deer (Cervidae)")
    case Dog extends Species("Dog (Canine - Domestic)")
    case DuprasiGerbil extends Species("Duprasi (gerbil)")
    case Donkey extends Species("Equine - Donkey")
    case Horse extends Species("Equine - Horse / Pony")
    case Mule extends Species("Equine - Mule")
    case Ferret extends Species("Ferret")
    case Goldfish extends Species("Fish - Coldwater - Carp, Goldfish")
    case CarpOther extends Species("Fish - Coldwater - Carp, other")
    case ColdwaterOther extends Species("Fish - Coldwater - other")
    case FishOther extends Species("Fish - other (unspecified)")
    case FishTropical extends Species("Fish - Tropical (unspecified)")
    case Goat extends Species("Goat (Caprine)")
    case AfricanPygmyHedgehog extends Species("Hedgehog - African Pygmy (Atelerix albiventris) ")
    case EuropeanHedgehog extends Species("Hedgehog - European (Erinaceus europaeus) ")
    case HedgehogOther extends Species("Hedgehog - other")
    case Lion extends Species("Lion")
    case Panther extends Species("Panther")
    case Pig extends Species("Pig (Porcine)")
    case RabbitDomestic extends Species("Rabbit (Domestic)")
    case RabbitUnspecified extends Species("Rabbit (unspecified)")
    case BeardedDragon extends Species("Reptile - Lizard - Bearded Dragon (Pogona vitticeps)")
    case Iguana extends Species("Reptile - Lizard - Iguana")
    case LeopardGecko extends Species("Reptile - Lizard - Leopard Gecko (Eublepharis macularius)")
    case LizardOther extends Species("Reptile - Lizard - other")
    case ReptileOther extends Species("Reptile - other")
    case Snake extends Species("Reptile - Snake")
    case Terrapin extends Species("Reptile - Terrapin")
    case Tortoise extends Species("Reptile - Tortoise")
    case HermannsTortoise extends Species("Reptile - Tortoise - Hermann's Tortoise (Testudo hermanni)")
    case MarginatedTortoise extends Species("Reptile - Tortoise - Marginated Tortoise (Testudo marginata)")
    case TortoiseOther extends Species("Reptile - Tortoise - other")
    case RussianTortoise extends Species("Reptile - Tortoise - Russian Tortoise (Testudo horsefeildii) ")
    case SpurThighedTortoise extends Species("Reptile - Tortoise - Spur Thighed Tortoise (Testudo graeca)")
    case Chinchilla extends Species("Rodent - Chinchilla")
    case Chipmunk extends Species("Rodent - Chipmunk")
    case Gerbil extends Species("Rodent - Gerbil")
    case GuineaPig extends Species("Rodent - Guinea Pig")
    case Hamster extends Species("Rodent - Hamster")
    case Mouse extends Species("Rodent - Mouse")
    case RodentOther extends Species("Rodent - other")
    case Rat extends Species("Rodent - Rat")
    case Sheep extends Species("Sheep (Ovine)")
    case Wolf extends Species("Wolf")
    case Unknown extends Species("Unknown")

    def beta = Seq(Horse, Dog, Cat)

object Species:
    /** As there's more than 32 species, we can't just derive a readwriter using the macros */
    given rw:ReadWriter[Species] = upickle.default.readwriter[String].bimap(
        s => s.longText,
        text => Species.values.find(_.longText == text).getOrElse(Species.Unknown)
    )